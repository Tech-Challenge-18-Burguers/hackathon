service: hackathon-services

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  role: arn:aws:iam::${aws:accountId}:role/LabRole
  iam:
    role:
      statements:
        - Effect: Allow
          Action: 's3:*'
          Resource: '*'
        - Effect: Allow
          Action: 'sqs:*'
          Resource: '*'
        - Effect: Allow
          Action: 'dynamodb:*'
          Resource: '*'
        # - Effect: Allow
        #   Action:
        #     - iam:CreateRole
        #     - iam:PassRole
        #     - tag:GetResources
        #     - tag:TagResources
        #     - tag:UntagResources
        #   Resource: "*"

  environment:
    TMP_DIR: '/tmp'
    PROCESS_VIDEO_QUEUE_NAME: process-video-queue-${opt:stage, 'dev'}
    COMPRESS_VIDEO_QUEUE_NAME: compress-video-queue-${opt:stage, 'dev'}
    STATUS_QUEUE_NAME: status-video-queue-${opt:stage, 'dev'}
    DATA_BUCKET_NAME: ${aws:accountId}-${opt:stage, 'dev'}-video-data
    VIDEO_TABLE: videos-${opt:stage, 'dev'}
    COGNITO_POOL_ID: ${cf:hackathon-services-${opt:stage, 'dev'}.UserPoolId}
    COGNITO_CLIENT_ID: ${cf:hackathon-services-${opt:stage, 'dev'}.UserPoolClientId}

build:
  esbuild: false

package:
  individually: false

functions:
  trigger:
    handler: src/handler/trigger.handler
    timeout: 30
    # events:
    #   - s3:
    #       bucket: ${aws:accountId}-${opt:stage, 'dev'}-video-data
    #       event: s3:ObjectCreated:*
    #       rules:
    #         - suffix: .mp4
    #       existing: true
  compress:
    handler: src/handler/compress.handler
    timeout: 900
    memorySize: 512
    ephemeralStorageSize: 512
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - CompressQueueSQS
              - Arn
          batchSize: 1
  process:
    handler: src/handler/process.handler
    timeout: 900
    memorySize: 512
    ephemeralStorageSize: 512
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - ProcessQueueSQS
              - Arn
          batchSize: 1
  create:
    handler: src/handler/create.handler
    timeout: 30
    events:
      - http:
          path: video
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: CognitoUserPoolAuthorizer
    
  update:
    handler: src/handler/update.handler
    timeout: 30
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - StatusQueueSQS
              - Arn
          batchSize: 1
  presignurl:
    handler: src/handler/presignurl.handler
    timeout: 30
    events:
      - http:
          path: video/url
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: CognitoUserPoolAuthorizer
  list:
    handler: src/handler/list.handler
    timeout: 30
    events:
      - http:
          path: video
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: CognitoUserPoolAuthorizer
  getById:
    handler: src/handler/getById.handler
    timeout: 30
    events:
      - http:
          path: video/{id}
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: CognitoUserPoolAuthorizer
  user:
    handler: src/handler/user.handler
    timeout: 30
  authenticate:
    handler: src/handler/authenticate.handler
    timeout: 30

resources:
  Resources: 
    ProcessQueueSQS:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: process-video-queue-${opt:stage, 'dev'}
        VisibilityTimeout: 900
    CompressQueueSQS:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: compress-video-queue-${opt:stage, 'dev'}
        VisibilityTimeout: 900
    StatusQueueSQS:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: status-video-queue-${opt:stage, 'dev'}
        VisibilityTimeout: 30
    BucketData:
      Type: "AWS::S3::Bucket"
      Properties:
        BucketName: ${aws:accountId}-${opt:stage, 'dev'}-video-data
        AccessControl: Private
    DynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: videos-${opt:stage, 'dev'}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    ApiGatewayRestApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: ${opt:stage, 'dev'}-hackathon-services
        Description: "API Gateway for Integration with Lambdas Functions"
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: hackathon-users
        AliasAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        MfaConfiguration: OFF
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: hackathon-service-api
        UserPoolId:
          Ref: CognitoUserPool
        GenerateSecret: false
        ExplicitAuthFlows:
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
    CognitoUserPoolAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: CognitoUserPoolAuthorizer
        Type: COGNITO_USER_POOLS
        IdentitySource: method.request.header.Authorization
        ProviderARNs:
          - Fn::GetAtt: [CognitoUserPool, Arn]
        RestApiId:
          Ref: ApiGatewayRestApi

  Outputs:
    UserPoolId:
      Value:
        Ref: CognitoUserPool
      Export:
        Name: CognitoUserPoolId
    UserPoolClientId:
      Value:
        Ref: CognitoUserPoolClient
      Export:
        Name: CognitoUserPoolClientId
    ApiGatewayRestApiId:
      Value:
        Ref: ApiGatewayRestApi
      Export:
        Name: ApiGatewayRestApiId

  
plugins:
  - serverless-plugin-typescript
  - serverless-offline