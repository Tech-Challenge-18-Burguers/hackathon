service: hackathon-services

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  role: arn:aws:iam::${aws:accountId}:role/LabRole
  iam:
    role:
      statements:
        - Effect: Allow
          Action: 's3:*'
          Resource: '*'
        - Effect: Allow
          Action: 'sqs:*'
          Resource: '*'
        - Effect: Allow
          Action: 'dynamodb:*'
          Resource: '*'
        - Effect: Allow
          Action:
            - iam:CreateRole
            - iam:PassRole
            - tag:GetResources
            - tag:TagResources
            - tag:UntagResources
          Resource: "*"
        - Effect: 'Allow'
          Actions: lambda:InvokeFunction
          Resource: '*'

  environment:
    TMP_DIR: '/tmp'
    PROCESS_VIDEO_QUEUE_NAME: process-video-queue-${opt:stage, 'dev'}
    COMPRESS_VIDEO_QUEUE_NAME: compress-video-queue-${opt:stage, 'dev'}
    STATUS_QUEUE_NAME: status-video-queue-${opt:stage, 'dev'}
    DATA_BUCKET_NAME: ${aws:accountId}-${opt:stage, 'dev'}-video-data
    VIDEO_TABLE: videos-${opt:stage, 'dev'}

build:
  esbuild: false

package:
  individually: false

functions:
  trigger:
    handler: src/handler/trigger.handler
    timeout: 30
    events:
      - s3:
          bucket: ${aws:accountId}-${opt:stage, 'dev'}-video-data
          event: s3:ObjectCreated:*
          rules:
            - suffix: .mp4
          existing: true
  compress:
    handler: src/handler/compress.handler
    timeout: 900
    memorySize: 512
    ephemeralStorageSize: 512
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - CompressQueueSQS
              - Arn
          batchSize: 1
  process:
    handler: src/handler/process.handler
    timeout: 900
    memorySize: 512
    ephemeralStorageSize: 512
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - ProcessQueueSQS
              - Arn
          batchSize: 1
  create:
    handler: src/handler/create.handler
    timeout: 30
    events:
      - http:
          path: video
          method: post
  update:
    handler: src/handler/update.handler
    timeout: 30
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - StatusQueueSQS
              - Arn
          batchSize: 1
  presignurl:
    handler: src/handler/presignurl.handler
    timeout: 30
    events:
      - http:
          path: video
          method: put

resources:
  Resources: 
    ProcessQueueSQS:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: process-video-queue-${opt:stage, 'dev'}
        VisibilityTimeout: 900
    CompressQueueSQS:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: compress-video-queue-${opt:stage, 'dev'}
        VisibilityTimeout: 900
    StatusQueueSQS:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: status-video-queue-${opt:stage, 'dev'}
        VisibilityTimeout: 30
    BucketData:
      Type: "AWS::S3::Bucket"
      Properties:
        BucketName: ${aws:accountId}-${opt:stage, 'dev'}-video-data
        AccessControl: Private
    DynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: videos-${opt:stage, 'dev'}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
  
plugins:
  - serverless-plugin-typescript